Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
  ImageId:
    Description: Please enter the ami-id
    Type: String
    Default: 
  KeyName: 
    Description: Please enter the keypair file name
    Type: String
    Default: devops-key
  InstanceType: 
    Description: Please enter the instance type
    Type: String
    Default: t2.micro
Resources:
      ## VPC
      PubPrivateVPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VpcCIDR

      ## SUBNETS     
      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [ 0, !GetAZs  '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
     
      PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [ 1, !GetAZs  '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
     
      PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [ 0, !GetAZs  '' ]
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
     
      PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [ 1, !GetAZs  '' ]
          CidrBlock: 1!Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
     
     ## INTERNET GATEWAY
      InternetGateway:
        Type: AWS::EC2::InternetGateway
      
      GatewayToInternet:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId: !Ref PubPrivateVPC
          InternetGatewayId: !Ref InternetGateway
      
      ## PUBLIC ROUTING
      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
      
      PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: GatewayToInternet
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
     
      PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
     
      PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet2
          RouteTableId: !Ref PublicRouteTable
     
      ## NAT GATEWAY
      NatGateway:
        Type: AWS::EC2::NatGateway
        DependsOn: NatPublicIP
        Properties: 
          SubnetId: !Ref PublicSubnet1
          AllocationId: !GetAtt NatPublicIP.AllocationId

      ## ELASTIC IP
      NatPublicIP:
        Type: AWS::EC2::EIP
        DependsOn: PubPrivateVPC
        Properties:
          Domain: vpc
     
      ## PRIVATE ROUTING
      PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
      
      PrivateRoute:
        Type: AWS::EC2::Route
        Properties:
          NatGatewayId: !Ref NatGateway
          RouteTableId: !Ref PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
     
      PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet1
          RouteTableId: !Ref PrivateRouteTable
     
      PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet2
          RouteTableId: !Ref PrivateRouteTable
      
      myInstanceRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: InstanceRole
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/myCustomerManagedPolicy'
      myInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: '/'
          Roles:
          - !Ref myInstanceRole
      InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to client host
          VpcId: !Ref myVPC
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 8081
              ToPort: 8081
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 8082
              ToPort: 8082
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

      Instance:
        Type: AWS::EC2::Instance
        Properties: 
          IamInstanceProfile: !Ref myInstanceProfile
          ImageId: !Ref ImageId
          KeyName: !Ref KeyName
          InstanceType: !Ref InstanceType
          SecurityGroupIds:
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref PrivateSubnet1
          BlockDeviceMappings:
          -
            DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: 24
              VolumeType: gp2
          UserData:
            Fn::Base64: 
              !Sub |
                #!/bin/bash -xe
                sudo apt-get install curl  gnupg ca-certificates lsb-release -y
                sudo mkdir -p /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-pluginsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-pluginlinux/ubuntu   $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
                git clone 
                cd assignment/usecase-1/
                docker compose -f docker-compose.yml up -d




